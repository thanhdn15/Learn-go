// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: microservice/micropb/repo.proto

package micropb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceSendMessage_SendMessage_FullMethodName = "/microservice.serviceSendMessage/sendMessage"
)

// ServiceSendMessageClient is the client API for ServiceSendMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceSendMessageClient interface {
	SendMessage(ctx context.Context, in *SendRequestMessage, opts ...grpc.CallOption) (*SendResponseMessage, error)
}

type serviceSendMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceSendMessageClient(cc grpc.ClientConnInterface) ServiceSendMessageClient {
	return &serviceSendMessageClient{cc}
}

func (c *serviceSendMessageClient) SendMessage(ctx context.Context, in *SendRequestMessage, opts ...grpc.CallOption) (*SendResponseMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponseMessage)
	err := c.cc.Invoke(ctx, ServiceSendMessage_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceSendMessageServer is the server API for ServiceSendMessage service.
// All implementations must embed UnimplementedServiceSendMessageServer
// for forward compatibility.
type ServiceSendMessageServer interface {
	SendMessage(context.Context, *SendRequestMessage) (*SendResponseMessage, error)
	mustEmbedUnimplementedServiceSendMessageServer()
}

// UnimplementedServiceSendMessageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceSendMessageServer struct{}

func (UnimplementedServiceSendMessageServer) SendMessage(context.Context, *SendRequestMessage) (*SendResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedServiceSendMessageServer) mustEmbedUnimplementedServiceSendMessageServer() {}
func (UnimplementedServiceSendMessageServer) testEmbeddedByValue()                            {}

// UnsafeServiceSendMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceSendMessageServer will
// result in compilation errors.
type UnsafeServiceSendMessageServer interface {
	mustEmbedUnimplementedServiceSendMessageServer()
}

func RegisterServiceSendMessageServer(s grpc.ServiceRegistrar, srv ServiceSendMessageServer) {
	// If the following call pancis, it indicates UnimplementedServiceSendMessageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceSendMessage_ServiceDesc, srv)
}

func _ServiceSendMessage_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSendMessageServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceSendMessage_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSendMessageServer).SendMessage(ctx, req.(*SendRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceSendMessage_ServiceDesc is the grpc.ServiceDesc for ServiceSendMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceSendMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.serviceSendMessage",
	HandlerType: (*ServiceSendMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendMessage",
			Handler:    _ServiceSendMessage_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservice/micropb/repo.proto",
}

const (
	ServiceReceivedMessage_ReceiveMessage_FullMethodName = "/microservice.serviceReceivedMessage/receiveMessage"
)

// ServiceReceivedMessageClient is the client API for ServiceReceivedMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceReceivedMessageClient interface {
	ReceiveMessage(ctx context.Context, in *ReceiveRequestMessage, opts ...grpc.CallOption) (*ReceiveResponseMessage, error)
}

type serviceReceivedMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceReceivedMessageClient(cc grpc.ClientConnInterface) ServiceReceivedMessageClient {
	return &serviceReceivedMessageClient{cc}
}

func (c *serviceReceivedMessageClient) ReceiveMessage(ctx context.Context, in *ReceiveRequestMessage, opts ...grpc.CallOption) (*ReceiveResponseMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveResponseMessage)
	err := c.cc.Invoke(ctx, ServiceReceivedMessage_ReceiveMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceReceivedMessageServer is the server API for ServiceReceivedMessage service.
// All implementations must embed UnimplementedServiceReceivedMessageServer
// for forward compatibility.
type ServiceReceivedMessageServer interface {
	ReceiveMessage(context.Context, *ReceiveRequestMessage) (*ReceiveResponseMessage, error)
	mustEmbedUnimplementedServiceReceivedMessageServer()
}

// UnimplementedServiceReceivedMessageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceReceivedMessageServer struct{}

func (UnimplementedServiceReceivedMessageServer) ReceiveMessage(context.Context, *ReceiveRequestMessage) (*ReceiveResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedServiceReceivedMessageServer) mustEmbedUnimplementedServiceReceivedMessageServer() {
}
func (UnimplementedServiceReceivedMessageServer) testEmbeddedByValue() {}

// UnsafeServiceReceivedMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceReceivedMessageServer will
// result in compilation errors.
type UnsafeServiceReceivedMessageServer interface {
	mustEmbedUnimplementedServiceReceivedMessageServer()
}

func RegisterServiceReceivedMessageServer(s grpc.ServiceRegistrar, srv ServiceReceivedMessageServer) {
	// If the following call pancis, it indicates UnimplementedServiceReceivedMessageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceReceivedMessage_ServiceDesc, srv)
}

func _ServiceReceivedMessage_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceReceivedMessageServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceReceivedMessage_ReceiveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceReceivedMessageServer).ReceiveMessage(ctx, req.(*ReceiveRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceReceivedMessage_ServiceDesc is the grpc.ServiceDesc for ServiceReceivedMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceReceivedMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.serviceReceivedMessage",
	HandlerType: (*ServiceReceivedMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "receiveMessage",
			Handler:    _ServiceReceivedMessage_ReceiveMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservice/micropb/repo.proto",
}
